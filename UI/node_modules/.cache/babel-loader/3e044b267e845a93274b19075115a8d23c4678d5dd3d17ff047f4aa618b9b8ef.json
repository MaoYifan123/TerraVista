{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { ElMessage } from 'element-plus';\nimport router from \"../../router\";\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: '/api',\n  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\n  timeout: 5000\n  // headers: {\n  //     'Content-Type': 'application/json' // 设置请求头\n  // }\n});\n\n// 请求拦截器\nservice.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = 'Bearer ' + token;\n  }\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n\n  // 只对需要认证的接口检查用户信息\n  const publicPaths = ['/auth/login', '/auth/register'];\n  if (!publicPaths.includes(config.url)) {\n    let userJson = sessionStorage.getItem('user');\n    if (!userJson) {\n      router.push('/login');\n    }\n  }\n  return config;\n}, error => {\n  // 对请求错误做些什么\n  console.log(error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nservice.interceptors.response.use(response => {\n  const res = response.data;\n  // 如果返回的状态码不是200，说明接口有问题，把错误信息显示出来\n  if (res.code !== 200) {\n    ElMessage({\n      message: res.message || 'Error',\n      type: 'error',\n      duration: 5 * 1000\n    });\n    return Promise.reject(new Error(res.message || 'Error'));\n  } else {\n    // 如果是返回的文件\n    if (response.config.responseType === 'blob') {\n      return res;\n    }\n    // 兼容服务端返回的字符串数据\n    if (typeof res === 'string') {\n      res = res ? JSON.parse(res) : res;\n    }\n    return res;\n  }\n}, error => {\n  console.log('err' + error);\n  ElMessage({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;","map":{"version":3,"names":["axios","ElMessage","router","service","create","baseURL","timeout","interceptors","request","use","config","token","localStorage","getItem","headers","publicPaths","includes","url","userJson","sessionStorage","push","error","console","log","Promise","reject","response","res","data","code","message","type","duration","Error","responseType","JSON","parse"],"sources":["C:/Users/35026/IdeaProjects/SpringVue/UI/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport { ElMessage } from 'element-plus'\r\nimport router from \"../../router\";\r\n\r\n// 创建axios实例\r\nconst service = axios.create({\r\n    baseURL: '/api',  // 注意！！ 这里是全局统一加上了 '/api' 前缀，也就是说所有接口都会加上'/api'前缀在，页面里面写接口的时候就不要加 '/api'了，否则会出现2个'/api'，类似 '/api/api/user'这样的报错，切记！！！\r\n    timeout: 5000,\r\n    // headers: {\r\n    //     'Content-Type': 'application/json' // 设置请求头\r\n    // }\r\n})\r\n\r\n// 请求拦截器\r\nservice.interceptors.request.use(\r\n    config => {\r\n        // 在发送请求之前做些什么\r\n        const token = localStorage.getItem('token')\r\n        if (token) {\r\n            config.headers['Authorization'] = 'Bearer ' + token\r\n        }\r\n        config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n\r\n        // 只对需要认证的接口检查用户信息\r\n        const publicPaths = ['/auth/login', '/auth/register'];\r\n        if (!publicPaths.includes(config.url)) {\r\n            let userJson = sessionStorage.getItem('user');\r\n            if(!userJson){\r\n                router.push('/login');\r\n            }\r\n        }\r\n\r\n        return config\r\n    },\r\n    error => {\r\n        // 对请求错误做些什么\r\n        console.log(error)\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n// 响应拦截器\r\nservice.interceptors.response.use(\r\n    response => {\r\n        const res = response.data\r\n        // 如果返回的状态码不是200，说明接口有问题，把错误信息显示出来\r\n        if (res.code !== 200) {\r\n            ElMessage({\r\n                message: res.message || 'Error',\r\n                type: 'error',\r\n                duration: 5 * 1000\r\n            })\r\n            return Promise.reject(new Error(res.message || 'Error'))\r\n        } else {\r\n            // 如果是返回的文件\r\n            if (response.config.responseType === 'blob') {\r\n                return res\r\n            }\r\n            // 兼容服务端返回的字符串数据\r\n            if (typeof res === 'string') {\r\n                res = res ? JSON.parse(res) : res\r\n            }\r\n            return res;\r\n        }\r\n    },\r\n    error => {\r\n        console.log('err' + error)\r\n        ElMessage({\r\n            message: error.message,\r\n            type: 'error',\r\n            duration: 5 * 1000\r\n        })\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\nexport default service\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,cAAc;AACxC,OAAOC,MAAM,MAAM,cAAc;;AAEjC;AACA,MAAMC,OAAO,GAAGH,KAAK,CAACI,MAAM,CAAC;EACzBC,OAAO,EAAE,MAAM;EAAG;EAClBC,OAAO,EAAE;EACT;EACA;EACA;AACJ,CAAC,CAAC;;AAEF;AACAH,OAAO,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAI;EACN;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,SAAS,GAAGH,KAAK;EACvD;EACAD,MAAM,CAACI,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;;EAEjE;EACA,MAAMC,WAAW,GAAG,CAAC,aAAa,EAAE,gBAAgB,CAAC;EACrD,IAAI,CAACA,WAAW,CAACC,QAAQ,CAACN,MAAM,CAACO,GAAG,CAAC,EAAE;IACnC,IAAIC,QAAQ,GAAGC,cAAc,CAACN,OAAO,CAAC,MAAM,CAAC;IAC7C,IAAG,CAACK,QAAQ,EAAC;MACThB,MAAM,CAACkB,IAAI,CAAC,QAAQ,CAAC;IACzB;EACJ;EAEA,OAAOV,MAAM;AACjB,CAAC,EACDW,KAAK,IAAI;EACL;EACAC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;EAClB,OAAOG,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAlB,OAAO,CAACI,YAAY,CAACmB,QAAQ,CAACjB,GAAG,CAC7BiB,QAAQ,IAAI;EACR,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAAI;EACzB;EACA,IAAID,GAAG,CAACE,IAAI,KAAK,GAAG,EAAE;IAClB5B,SAAS,CAAC;MACN6B,OAAO,EAAEH,GAAG,CAACG,OAAO,IAAI,OAAO;MAC/BC,IAAI,EAAE,OAAO;MACbC,QAAQ,EAAE,CAAC,GAAG;IAClB,CAAC,CAAC;IACF,OAAOR,OAAO,CAACC,MAAM,CAAC,IAAIQ,KAAK,CAACN,GAAG,CAACG,OAAO,IAAI,OAAO,CAAC,CAAC;EAC5D,CAAC,MAAM;IACH;IACA,IAAIJ,QAAQ,CAAChB,MAAM,CAACwB,YAAY,KAAK,MAAM,EAAE;MACzC,OAAOP,GAAG;IACd;IACA;IACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;MACzBA,GAAG,GAAGA,GAAG,GAAGQ,IAAI,CAACC,KAAK,CAACT,GAAG,CAAC,GAAGA,GAAG;IACrC;IACA,OAAOA,GAAG;EACd;AACJ,CAAC,EACDN,KAAK,IAAI;EACLC,OAAO,CAACC,GAAG,CAAC,KAAK,GAAGF,KAAK,CAAC;EAC1BpB,SAAS,CAAC;IACN6B,OAAO,EAAET,KAAK,CAACS,OAAO;IACtBC,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,CAAC,GAAG;EAClB,CAAC,CAAC;EACF,OAAOR,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;AAChC,CACJ,CAAC;AAED,eAAelB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}