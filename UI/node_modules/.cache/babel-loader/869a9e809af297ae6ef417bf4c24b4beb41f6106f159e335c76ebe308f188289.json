{"ast":null,"code":"import axios from 'axios';\nconst API_URL = '/api/auth';\nexport const login = async (username, password) => {\n  try {\n    const response = await axios.post(`${API_URL}/login`, {\n      username,\n      password\n    });\n    if (response.data.token) {\n      localStorage.setItem('token', response.data.token);\n      axios.defaults.headers.common['Authorization'] = `Bearer ${response.data.token}`;\n    }\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const register = async userData => {\n  try {\n    const response = await axios.post(`${API_URL}/register`, userData);\n    return response.data;\n  } catch (error) {\n    throw error;\n  }\n};\n\n// 设置请求拦截器，为每个请求添加 token\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","API_URL","login","username","password","response","post","data","token","localStorage","setItem","defaults","headers","common","error","register","userData","interceptors","request","use","config","getItem","Promise","reject"],"sources":["C:/Users/35026/IdeaProjects/SpringVue/UI/src/api/auth.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = '/api/auth';\r\n\r\nexport const login = async (username, password) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/login`, {\r\n      username,\r\n      password\r\n    });\r\n    if (response.data.token) {\r\n      localStorage.setItem('token', response.data.token);\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${response.data.token}`;\r\n    }\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const register = async (userData) => {\r\n  try {\r\n    const response = await axios.post(`${API_URL}/register`, userData);\r\n    return response.data;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\n// 设置请求拦截器，为每个请求添加 token\r\naxios.interceptors.request.use(\r\n  config => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  error => {\r\n    return Promise.reject(error);\r\n  }\r\n); "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,WAAW;AAE3B,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAK;EACjD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,OAAO,QAAQ,EAAE;MACpDE,QAAQ;MACRC;IACF,CAAC,CAAC;IACF,IAAIC,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;MACvBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;MAClDR,KAAK,CAACW,QAAQ,CAACC,OAAO,CAACC,MAAM,CAAC,eAAe,CAAC,GAAG,UAAUR,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;IAClF;IACA,OAAOH,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,QAAQ,GAAG,MAAOC,QAAQ,IAAK;EAC1C,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,GAAGL,OAAO,WAAW,EAAEe,QAAQ,CAAC;IAClE,OAAOX,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOO,KAAK,EAAE;IACd,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACAd,KAAK,CAACiB,YAAY,CAACC,OAAO,CAACC,GAAG,CAC5BC,MAAM,IAAI;EACR,MAAMZ,KAAK,GAAGC,YAAY,CAACY,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIb,KAAK,EAAE;IACTY,MAAM,CAACR,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUJ,KAAK,EAAE;EACrD;EACA,OAAOY,MAAM;AACf,CAAC,EACDN,KAAK,IAAI;EACP,OAAOQ,OAAO,CAACC,MAAM,CAACT,KAAK,CAAC;AAC9B,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}